/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.company.priceservice.infrastructure.adapters.api;

import com.company.priceservice.infrastructure.adapters.api.models.PriceDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.time.LocalDateTime;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "price", description = "Find price details")
public interface PriceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /price : Find prices by applicationDate, productId or brandId
     *
     * @param applicationDate Application date in format YYYY-MM-DD&#39;T&#39;HH:mm:ss (optional)
     * @param productId Id of product associated (optional)
     * @param brandId Id of brand associated (optional)
     * @return successful operation (status code 200)
     *         or Invalid input parameters (status code 400)
     *         or No price found for the specified parameters (status code 404)
     */
    @Operation(
        operationId = "findPriceByParams",
        summary = "Find prices by applicationDate, productId or brandId",
        tags = { "price" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input parameters"),
            @ApiResponse(responseCode = "404", description = "No price found for the specified parameters")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/price",
        produces = { "application/json" }
    )
    default ResponseEntity<PriceDTO> findPriceByParams(
        @Parameter(name = "applicationDate", description = "Application date in format YYYY-MM-DD'T'HH:mm:ss") @Valid @RequestParam(value = "applicationDate", required = false) LocalDateTime applicationDate,
        @Parameter(name = "productId", description = "Id of product associated") @Valid @RequestParam(value = "productId", required = false) Long productId,
        @Parameter(name = "brandId", description = "Id of brand associated") @Valid @RequestParam(value = "brandId", required = false) Integer brandId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"productId\" : 35455, \"endDate\" : \"2025-12-31T23:59:59\", \"price\" : 25.45, \"brandId\" : 1, \"currency\" : \"EUR\", \"priceId\" : 2, \"startDate\" : \"2025-01-01T00:00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
